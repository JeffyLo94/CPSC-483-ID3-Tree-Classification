	---------- Performing ID3 for: ACTION, Layer = 0 ----------

	p = 6/10
	p = 4/10
	E(S)= - (0.6)log2(0.6) - (0.4)log2(0.4)
	E(S_)= 0.9709505944546686
	Entropy of ACTION indicates information content can be gained

	IG for HAS a JOB
{'yes': 6, 'no': 4}
	HAS a JOB probabilities: : {'yes': 0.6, 'no': 0.4}
	E(S_HAS a JOB, yes)
		total for HAS a JOB, yes: 6
		subset for yes, leave-alone: 4/6 = 0.6666666666666666
		subset for yes, force-into: 2/6 = 0.3333333333333333
		E(S)= - (0.6666666666666666log2(0.6666666666666666) - (0.3333333333333333log2(0.3333333333333333)
	E(S_HAS a JOB, yes)= 0.9182958340544896
	E(S_HAS a JOB, no)
		total for HAS a JOB, no: 4
		subset for no, leave-alone: 2/4 = 0.5
		subset for no, force-into: 2/4 = 0.5
		E(S)= - (0.5log2(0.5) - (0.5log2(0.5)
	E(S_HAS a JOB, no)= 1.0
	IG(S_ACTION, HAS a JOB)= 0.9709505944546686 - (0.6)0.9182958340544896 - (0.4)1.0
	IG(S_ACTION, HAS a JOB)= 0.01997309402197489

	IG for HAS an INSURANCE
{'yes': 2, 'no': 8}
	HAS an INSURANCE probabilities: : {'yes': 0.2, 'no': 0.8}
	E(S_HAS an INSURANCE, yes)
		total for HAS an INSURANCE, yes: 2
		subset for yes, leave-alone: 2/2 = 1.0
		subset for yes, force-into: 0/2 = 0.0
		ignoring 0 probability
		E(S)= - (1.0log2(1.0)
	E(S_HAS an INSURANCE, yes)= 0.0
	E(S_HAS an INSURANCE, no)
		total for HAS an INSURANCE, no: 8
		subset for no, leave-alone: 4/8 = 0.5
		subset for no, force-into: 4/8 = 0.5
		E(S)= - (0.5log2(0.5) - (0.5log2(0.5)
	E(S_HAS an INSURANCE, no)= 1.0
	IG(S_ACTION, HAS an INSURANCE)= 0.9709505944546686 - (0.2)0.0 - (0.8)1.0
	IG(S_ACTION, HAS an INSURANCE)= 0.17095059445466854

	IG for VOTES
{'yes': 6, 'no': 4}
	VOTES probabilities: : {'yes': 0.6, 'no': 0.4}
	E(S_VOTES, yes)
		total for VOTES, yes: 6
		subset for yes, leave-alone: 6/6 = 1.0
		subset for yes, force-into: 0/6 = 0.0
		ignoring 0 probability
		E(S)= - (1.0log2(1.0)
	E(S_VOTES, yes)= 0.0
	E(S_VOTES, no)
		total for VOTES, no: 4
		subset for no, leave-alone: 0/4 = 0.0
		subset for no, force-into: 4/4 = 1.0
		ignoring 0 probability
		E(S)= - (1.0log2(1.0)
	E(S_VOTES, no)= 0.0
	IG(S_ACTION, VOTES)= 0.9709505944546686 - (0.6)0.0 - (0.4)0.0
	IG(S_ACTION, VOTES)= 0.9709505944546686

	Info Gains:
		HAS a JOB: 0.01997309402197489
		HAS an INSURANCE: 0.17095059445466854
		VOTES: 0.9709505944546686
	Greatest IG is VOTES
	Adding VOTES as root


------------ R E S U L T I N G  T R E E ------------
Node('/VOTES')
possible Children['yes', 'no']


	----- Creating subset for branch yes -----
  HAS a JOB HAS an INSURANCE VOTES       ACTION
0       yes              yes   yes  leave-alone
1       yes               no   yes  leave-alone
2        no               no   yes  leave-alone
3       yes              yes   yes  leave-alone
4       yes               no   yes  leave-alone
5        no               no   yes  leave-alone
Labels to use: ['HAS a JOB', 'HAS an INSURANCE', 'ACTION']

		---------- Performing ID3 for: VOTES_yes, Layer = 1 ----------

		p = 6/6
		E(S)= - (1.0)log2(1.0)
		E(S_VOTES_yes)= 0.0
		No information to gain from this set

		leaf node 'leave-alone' added to branch yes


------------ R E S U L T I N G  T R E E ------------
Node('/VOTES')
└── Node('/VOTES/yes')
    └── Node('/VOTES/yes/leave-alone')


	----- Creating subset for branch no -----
  HAS a JOB HAS an INSURANCE VOTES      ACTION
0       yes               no    no  force-into
1        no               no    no  force-into
2       yes               no    no  force-into
3        no               no    no  force-into
Labels to use: ['HAS a JOB', 'HAS an INSURANCE', 'ACTION']

		---------- Performing ID3 for: VOTES_no, Layer = 1 ----------

		p = 4/4
		E(S)= - (1.0)log2(1.0)
		E(S_VOTES_no)= 0.0
		No information to gain from this set

		leaf node 'force-into' added to branch no


------------ R E S U L T I N G  T R E E ------------
Node('/VOTES')
├── Node('/VOTES/yes')
│   └── Node('/VOTES/yes/leave-alone')
└── Node('/VOTES/no')
    └── Node('/VOTES/no/force-into')
